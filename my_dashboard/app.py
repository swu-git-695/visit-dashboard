import streamlit as st
import pandas as pd
import plotly.express as px
import json
import os
import re
import datetime

# ==== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå users.json ====
USER_FILE = "users.json"
if not os.path.exists(USER_FILE):
    with open(USER_FILE, "w") as f:
        json.dump({}, f)

def load_users():
    with open(USER_FILE, "r") as f:
        return json.load(f)

def save_users(users):
    with open(USER_FILE, "w") as f:
        json.dump(users, f, indent=2)

# ==== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ log ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ====
LOG_FILE = "upload_log.json"
def load_upload_log():
    if not os.path.exists(LOG_FILE):
        with open(LOG_FILE, "w") as f:
            json.dump({}, f)
    with open(LOG_FILE, "r") as f:
        return json.load(f)

def save_upload_log(log):
    with open(LOG_FILE, "w") as f:
        json.dump(log, f, indent=2)

def add_upload_log(username, filename):
    log = load_upload_log()
    entry = {
        "filename": filename,
        "upload_time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    if username not in log:
        log[username] = []
    log[username].append(entry)
    save_upload_log(log)

# ==== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏Ñ‡∏∑‡∏ô username) ====
def check_login(identifier, password):
    users = load_users()
    for username, info in users.items():
        if isinstance(info, dict):
            if identifier == username or identifier == info.get("email"):
                if info.get("password") == password:
                    return username
        else:
            if identifier == username and info == password:
                return username
    return None

# ==== ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ====
def signup(username, email, password):
    users = load_users()
    if username in users:
        return False
    users[username] = {"email": email, "password": password}
    save_users(users)
    return True

def is_valid_email(email):
    return re.match(r"[^@]+@[^@]+\\.[^@]+", email)

# ==== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô session_state ====
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
if "page" not in st.session_state:
    st.session_state.page = "login"
if "username" not in st.session_state:
    st.session_state.username = None

# ==== CSS Styling ‡πÉ‡∏´‡∏°‡πà ====
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Kanit:wght@400;600&display=swap');
body, .main {
    font-family: 'Kanit', sans-serif;
    background: linear-gradient(to right, #e3f2fd, #ffffff);
    color: #2b2d42;
}
.main > div {
    background-color: white;
    border-radius: 16px;
    padding: 2rem 3rem;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
    margin-top: 30px;
}
h1, h2, h3, .stSubheader {
    color: #003366;
    font-weight: 600;
    margin-bottom: 1rem;
    text-align: center;
}
.stButton > button {
    background: linear-gradient(to right, #2196f3, #1e88e5);
    color: white;
    border-radius: 30px;
    padding: 0.6rem 1.5rem;
    font-weight: bold;
    border: none;
    transition: all 0.3s ease;
}
.stButton > button:hover {
    background: #1565c0;
    transform: scale(1.03);
}
.logout-btn {
    position: fixed;
    top: 20px;
    right: 20px;
    background-color: #e53935;
    color: #fff;
    padding: 0.6rem 1.5rem;
    font-weight: bold;
    border: none;
    border-radius: 30px;
    font-size: 1rem;
    z-index: 999;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    transition: background-color 0.3s ease;
}
.logout-btn:hover {
    background-color: #c62828;
}
.card {
    background: #ffffff;
    padding: 1.5rem;
    border-radius: 16px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    margin-top: 1.5rem;
}
</style>
""", unsafe_allow_html=True)

# ==== ‡∏´‡∏ô‡πâ‡∏≤ LOGIN / SIGNUP ====
if not st.session_state.logged_in:
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.session_state.page == "login":
            st.markdown("<h2 style='text-align:center; color:#4a90e2;'>üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h2>", unsafe_allow_html=True)
            st.markdown("<p style='text-align:center; color:#555;'>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</p>", unsafe_allow_html=True)
            with st.form("login_form"):
                identifier = st.text_input("üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•", placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
                password = st.text_input("üîí ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password", placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
                submitted = st.form_submit_button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
            if submitted:
                user = check_login(identifier.strip(), password.strip())
                if user:
                    st.session_state.logged_in = True
                    st.session_state.username = user
                    st.success("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    st.rerun()
                else:
                    st.error("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            st.markdown("---")
            st.markdown("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?")
            if st.button("üìå ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"):
                st.session_state.page = "signup"
                st.rerun()

        elif st.session_state.page == "signup":
            st.markdown("<h2 style='text-align:center; color:#4a90e2;'>üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà</h2>", unsafe_allow_html=True)
            st.markdown("<p style='text-align:center; color:#555;'>‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà</p>", unsafe_allow_html=True)
            with st.form("signup_form"):
                new_user = st.text_input("üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
                new_email = st.text_input("üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•", placeholder="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: example@mail.com")
                new_pass = st.text_input("üîí ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password", placeholder="‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
                submitted = st.form_submit_button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ")
            if submitted:
                if not new_user or not new_email or not new_pass:
                    st.error("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
                elif not is_valid_email(new_email):
                    st.error("üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")
                elif signup(new_user.strip(), new_email.strip(), new_pass.strip()):
                    st.success("‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
                    st.session_state.page = "login"
                    st.rerun()
                else:
                    st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô")
            if st.button("‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
                st.session_state.page = "login"
                st.rerun()
    st.stop()

# ==== DASHBOARD ====

# ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡πÜ ‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô ‡πÅ‡∏ö‡∏ö fixed
if st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", key="logout", help="‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", on_click=lambda: (setattr(st.session_state, "logged_in", False), setattr(st.session_state, "username", None), st.rerun()), args=None):
    pass

# ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å Streamlit ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏ó‡∏≥ fixed button ‡∏ú‡∏°‡∏à‡∏∞‡πÉ‡∏ä‡πâ st.markdown ‡∏Å‡∏±‡∏ö html+css ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö fixed
st.markdown("""
    <button class="logout-btn" onclick="document.querySelector('button[kind=logout]').click();">
        üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    </button>
    <script>
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° logout ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÅ‡∏™‡∏î‡∏á‡∏ã‡πâ‡∏≥)
    const btns = window.parent.document.querySelectorAll('button[kind=logout]');
    btns.forEach(b=>b.style.display='none');
    </script>
""", unsafe_allow_html=True)

st.markdown(f"""
<h1 style='text-align:center; color:#003366;'>üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h1>
<p style='text-align:center; font-size: 1.1rem;'>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì <strong>{st.session_state.username}</strong> ‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤‡∏≠‡∏†‡∏±‡∏¢‡∏†‡∏π‡πÄ‡∏ö‡∏®‡∏£</p>
""", unsafe_allow_html=True)

st.markdown("<div class='card'>", unsafe_allow_html=True)
st.subheader("üìÇ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (Excel)")
uploaded_file = st.file_uploader("", type=["xlsx"])
st.markdown("</div>", unsafe_allow_html=True)

if uploaded_file is not None:
    try:
        df = pd.read_excel(uploaded_file)
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.subheader("üßæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel")
        st.dataframe(df, use_container_width=True)
        st.markdown("**‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel:** " + ", ".join(df.columns.tolist()))
        
        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå '{uploaded_file.name}' ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

        current_user = st.session_state.get("username", None)
        if current_user:
            add_upload_log(current_user, uploaded_file.name)

        # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
        numeric_cols = df.select_dtypes(include='number').columns.tolist()
        non_numeric_cols = df.select_dtypes(exclude='number').columns.tolist()

        if numeric_cols and non_numeric_cols:
            x_col = non_numeric_cols[0]
            y_col = numeric_cols[0]

            filtered_df = df[df[x_col].notnull()]

            if not filtered_df.empty:
                fig_bar = px.bar(
                    filtered_df,
                    x=x_col,
                    y=y_col,
                    title=f'‡∏Å‡∏£‡∏≤‡∏ü {y_col} ‡∏ï‡∏≤‡∏° {x_col}',
                    text=y_col,
                    color=x_col,
                    color_discrete_sequence=px.colors.qualitative.Pastel
                )
                fig_bar.update_traces(textposition='outside')
                fig_bar.update_layout(
                    xaxis_title=x_col,
                    yaxis_title=y_col,
                    uniformtext_minsize=8,
                    uniformtext_mode='hide',
                    xaxis_tickangle=-45,
                    plot_bgcolor='white',
                    margin=dict(t=50, b=150)
                )
                st.plotly_chart(fig_bar, use_container_width=True)

                fig_pie = px.pie(
                    filtered_df,
                    names=x_col,
                    values=y_col,
                    title=f'‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏° {y_col} ‡∏ï‡∏≤‡∏° {x_col}'
                )
                fig_pie.update_traces(textinfo='value+label')
                st.plotly_chart(fig_pie, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ null")
        else:
            st.info("‚ÑπÔ∏è ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)")

        st.markdown("</div>", unsafe_allow_html=True)
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {e}")

current_user = st.session_state.get("username", None)
if current_user:
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("## üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
    st.markdown(f"<p style='font-size: 1.05rem;'>üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì <b>{current_user}</b> ‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: <code>2025-06-13</code>)</p>", unsafe_allow_html=True)

    with st.form("search_form", clear_on_submit=False):
        search_col1, search_col2 = st.columns([4, 1])
        with search_col1:
            search = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", placeholder="‡πÄ‡∏ä‡πà‡∏ô report.xlsx ‡∏´‡∏£‡∏∑‡∏≠ 2025-06-13")
        with search_col2:
            submitted = st.form_submit_button("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

    log = load_upload_log()
    user_logs = log.get(current_user, [])

    if submitted:
        search = search.strip()
        if search:
            filtered_logs = [entry for entry in user_logs
                             if search.lower() in entry['filename'].lower() or search in entry['upload_time']]
            if filtered_logs:
                st.success(f"‚úÖ ‡∏û‡∏ö {len(filtered_logs)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö \"{search}\"")
                df_filtered = pd.DataFrame(filtered_logs)
                df_filtered.index += 1
                df_filtered.rename_axis("‡∏•‡∏≥‡∏î‡∏±‡∏ö", inplace=True)
                df_filtered.rename(columns={"filename": "üìÅ ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå", "upload_time": "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"}, inplace=True)
                st.table(df_filtered)
            else:
                st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        else:
            st.info("‚ÑπÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•")
    else:
        st.markdown("<p style='color:gray; font-size: 0.95rem;'>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'</p>", unsafe_allow_html=True)

    st.markdown("</div>", unsafe_allow_html=True)
